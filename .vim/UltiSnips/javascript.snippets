# Taken from https://raw.githubusercontent.com/mauroporrasp/vim-snippets/ee2f8f7fbbf28814bd074402eebbbcfaadcf88ac/snippets/javascript.es6.react.snippets, adapted for Ultisnips
# Also see https://github.com/honza/vim-snippets/pull/800

snippet ri1 "Import React"
import React from 'react'${0}
endsnippet

snippet ri2 "Import React and Component"
import React, { Component } from 'react'${0}
endsnippet

snippet ri3 "Import Proptypes"
import PropTypes from 'prop-types'${0}
endsnippet

snippet rcla "React class with render"
class ${1:MyComponent} extends Component {
	render() {
		return (
			<div>
				${0}
			</div>
		)
	}
}
endsnippet

snippet rcon "React constructor"
constructor(props) {
	super(props)

	this.state = {
		${1:foo}: ${0:'foo'},
	}
}
endsnippet

snippet rcom "Presentational component"
(props) => {
return (
	<div>
		${0}
	</div>
)
}
endsnippet

# Lifecycle Methods
snippet rcdm "componentDidMount"
componentDidMount() {
	${0}
}
endsnippet

# State
snippet rtss "this.setState ({...})"
this.setState({
	${1:foo}: ${0:'foo'},
})
endsnippet

snippet rts "this.state"
this.state.${0}
endsnippet

# Props
snippet rp "props"
props.${0}
endsnippet

snippet rtp "this.props"
this.props.${0}
endsnippet

# React Snippets are from http://courses.reactjsprogram.com/courses/redux-and-immutablejs/lectures/945035
# React Native Stateless Functional Component Skeleton
global !p
def react_classname(filename):
# Original (Sublime Text conformant) regexp to extract the class name: ${TM_FILENAME/(.?\w*)(?:\.\w+)*$/$1/g}
    return re.match(r'.*(?=\.)', fn).group()
endglobal

snippet rbth "React Basic Test Harness"
import React from 'react';
import ReactDOM from 'react-dom';
import ${1:`!p snip.rv = react_classname(fn)`} from './$1';

describe('$1', () => {
	it('renders without crashing', () => {
		const div = document.createElement('div');
		ReactDOM.render(<$1 />, div);
	});

	$0
})
endsnippet

snippet reth "React Enzyme Test Harness"
import React from 'react';
import { $1 } from 'enzyme';
import '@/globals/testHelper';
import ${2:`!p snip.rv = react_classname(fn)`} from './$2';

let wrapper;

describe('$2', () => {
	it('renders without crashing', () => {
	  wrapper = $1(<$2 />);
	});

	$0
});
endsnippet

snippet rsna "React Snapshot Test Harness"
import React from 'react';
import renderer from 'react-test-renderer';
import ${1:`!p snip.rv = react_classname(fn)`} from './$1';

describe('$1', () => {
	const props = {
		t: key => key
	};

	it('renders correctly', () => {
		const tree = renderer.create(<$1 {...props} />).toJSON();
		expect(tree).toMatchSnapshot();
	});
});
endsnippet

snippet rsth "React Store Test Harness"
import { Provider } from 'react-redux';
import { loggedInStore, loggedInUserId } from '@/globals/testHelper';

const store = loggedInStore();

      <Provider store={store}>
      </Provider>
      $0
endsnippet

snippet jte "Jest Test Header"
import React from 'react';
import { $1 }  from 'enzyme';
import '@/globals/testHelper';
$0
endsnippet

snippet jd "Jest describe"
describe('$1', () => {
	$0
});
endsnippet

snippet ji "Jest it"
it('${1}', () => {
	${0}
});
endsnippet

snippet jba "Jest beforeAll"
beforeAll(() => {
	${0}
});
endsnippet

snippet jbe "Jest beforeEach"
beforeEach(() => {
	${0}
});
endsnippet

snippet rnccf "React Native Stateless Component"
import React from 'react';
import PropTypes from 'prop-types';
import { View, StyleSheet, Text } from 'react-native';

${1:`!p snip.rv = react_classname(fn)`}.propTypes = {

};

export default function $1(props) {
	return (
		${0:<View>
			<Text>
				$1
			</Text>
		</View>}
	);
}

const styles = StyleSheet.create({

});
endsnippet

snippet rnccs "React Native Stateful Component"
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { View, Text } from 'react-native';

export default class ${1:`!p snip.rv = react_classname(fn)`} extends Component {
	static propTypes = {}
	state = {}
	render() {
		return (
			${0:<View>
				<Text>
					$1
				</Text>
			</View>}
		);
	}
}
endsnippet

snippet duck "Redux Module skeleton"
const initialState = {};

export default function ${1:`!p snip.rv = react_classname(fn)`} (state = initialState, action) {
	switch (action.type) {
		default :
			return state;
	}
endsnippet

snippet rc "Redux Connect skeleton"
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import {  } from 'components';

function mapStateToProps(state, props) {
	return {
	};
}

function mapDispatchToProps(dispatch, props) {
	return bindActionCreators( , dispatch);
}

export default connect(
	mapStateToProps,
	mapDispatchToProps
)
endsnippet

snippet rccs "React Stateful Component"
import React, { Component } from 'react';
import { connect } from 'react-redux';

class ${1:`!p snip.rv = react_classname(fn)`} extends Component {
	render() {
		return (
			${0:<div></div>}
		);
	}
}

const mapStateToProps = state => ({
})

export default connect(mapStateToProps)($1)
endsnippet

snippet rccf "React Stateless Functional Component"
import React from 'react';
import PropTypes from 'prop-types';

export default function ${1:`!p snip.rv = react_classname(fn)`}(props) {
	return (
		${0:<div></div>}
	);
}
endsnippet

snippet ...state "return {...state,}"
return {
	...state,
	$0
}
endsnippet
