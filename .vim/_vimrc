set nocompatible
set modeline
set number

set tabstop=8
set softtabstop=2
set shiftwidth=2
set expandtab

" Ensure exit from CTRL-P window is fast
set timeout timeoutlen=1000 ttimeoutlen=5

filetype off

" -------------------------------------------------------------------------
" Store temporary files in a central spot to ease
" clean-up after machine crashes
" https://github.com/tpope/vim-obsession/issues/18
let vimtmp = $HOME . '/tmp/vim/' . getpid()
silent! call mkdir(vimtmp, "p", 0700)
let &backupdir=vimtmp
let &directory=vimtmp

" Output the syntax highlighting item under the cursor
" echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')

let mapleader = ","

" Workaround for https://github.com/vim/vim/issues/3117
if has('python3') && !has('patch-8.1.201')
  silent! python3 1
endif

if filereadable(expand("$VIMRUNTIME/macros/matchit.vim"))
  source $VIMRUNTIME/macros/matchit.vim
endif

set mouse=a
if !has('nvim') " :help nvim-features-removed
  if has("mouse_sgr")
      set ttymouse=sgr
  else
      set ttymouse=xterm2
  end
endif

source ~/.vim/plugs.vim
source $HOME/.vim/tabline.vim
source ~/.vim/delete_inactive_buffers.vim

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" -- General settings -----------------------------------------------------
set sessionoptions-=curdir
set sessionoptions+=sesdir

" Do not store global options. Otherwise the machine-specific runtimepath
" would also be stored, and Sessions would not be portable across different
" machines.
set sessionoptions-=options

let s:host_specific_pre_setup = expand("<sfile>").".host.pre.".hostname()
if findfile(s:host_specific_pre_setup,"<sfile>:%h") != ""
  source `=expand(s:host_specific_pre_setup)`
endif
unlet s:host_specific_pre_setup

if &term =~ "dtterm" || &term =~ "xterm"|| &term =~ "rxvt-unicode"
  if has("terminfo")
    set t_Sf=<Esc>[3%p1%dm
    set t_Sb=<Esc>[4%p1%dm
  else
    set t_Sf=<Esc>[3%dm
    set t_Sb=<Esc>[4%dm
  endif
endif

set tildeop
set nohlsearch
set visualbell
set autoindent
set incsearch
set sidescroll=1
" FIXME:exrc is not necessary if I am in $HOME/.vim
" Then, the whole configuration will be sourced twice.
set exrc " enable reading of local .vimrc and .exrc files
set winminheight=0 " minimize a window to just its status bar
set textwidth=80
set laststatus=2
set diffopt=filler,vertical
set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P

au BufReadPost quickfix  set nowrap

" -- Color Settings -------------------------------------------------------
if &term =~ "256color" || &term =~ "dtterm"
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
elseif  &term =~ "rxvt-unicode"
  set t_Co=88
"2010-04-03: The following two lines don't help on Linux - my term is
"xterm, and I have 256 colors there. Will have to adapt this to work on all
"machines; in the meantime just commenting it out.
"elseif &term =~ "xterm"
"  set t_Co=8
endif

set background=dark " if set, must come before highlight commands

let g:gruvbox_contrast_dark="hard"
colorscheme gruvbox

syntax on

" Prevent weird black color shading with gruvbox. Needs to be set after syntax on
" http://stackoverflow.com/questions/4325682/vim-colorschemes-not-changing-background-color?lq=1
hi Normal ctermbg=NONE
hi nonText ctermbg=NONE

hi Folded guifg=#DDDDDD

hi TabLine ctermfg=White ctermbg=Black guifg=White guibg=Black
hi TabLineSel ctermfg=Black ctermbg=White guifg=Black guibg=White
" Tabs and special characters with "set list" are too dark (":help listchars"):
hi! link NonText GruvboxFg2
hi! link SpecialKey GruvboxFg2
" Comments are too dark
hi! link Comment GruvboxFg2

" https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/
if &term =~ "italic"
  hi Comment cterm=italic
end

if has("gui_running")
  set guioptions-=m " remove menu bar
  set guioptions-=T " remove tool bar
endif

source <sfile>.handling_gzip
source <sfile>.tip343_large_files
source <sfile>.tip112_indentation_helper

" -- OS-specific settings -------------------------------------------------
let s:os = "unknown"
if has("mac")
  let s:os="mac"
elseif has("unix")
  let s:os="unix"
elseif has("win32")
  let s:os="win32"
" else nothing specific to be done.
endif
if s:os != "unknown"
  let s:os_specific_setup = expand("<sfile>").".os.".s:os
  if findfile(s:os_specific_setup,"<sfile>:%h") != ""
    source `=expand(s:os_specific_setup)`
  endif
  unlet s:os_specific_setup
endif
unlet s:os

" -- host-specific settings -----------------------------------------------
let s:host_specific_setup = expand("<sfile>").".host.".hostname()
if findfile(s:host_specific_setup,"<sfile>:%h") != ""
  source `=expand(s:host_specific_setup)`
endif
unlet s:host_specific_setup

" Vim Tip 173: Quick movement between split windows
nmap <c-l> <c-w>l
nmap <c-h> <c-w>h
nmap <c-k> <c-w>k
nmap <c-j> <c-w>j
nmap <c-p> :Files<Enter>

" == Plugin-specific pre-load settings ====================================
"  (Have to be defined before the plugin is loaded)

let g:fzf_tags_command = 'ctags -R --options=$HOME/.ctags.d'
nmap <silent> <leader>n :call fzf#run(fzf#wrap({'source': 'find ~/Documents/git_projects/notes -type f'}))<Cr>
command!      -bang -nargs=* Rgg                        call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".expand("<cword>"), 1, <bang>0)'
nmap <Leader>f :Rgg<CR>
let g:fzf_preview_window = ''

let g:notes_directories = ['~/Documents/Dropbox/notes']
let g:notes_suffix = '.txt'
let g:notes_smart_quotes = 0
let g:netrw_alto = 1 " split below the file browser

" In the tskeleton plugin, g:tskelMapGoToNextTag is by default mapped to <c-j>,
" but that would override the setting of Vim Tip 173 above. Since we don't need it,
" just clear it:
let g:tskelMapGoToNextTag = ""

" See https://github.com/tpope/vim-markdown
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'ruby']

set wildignore+=*.jpg,*.png,*.o

let g:GetLatestVimScripts_allowautoinstall=1

let g:vroom_use_vimux=1

" -- Grepper --------------------------------------------------------------
nnoremap <leader>gg :Grepper -tool git<cr>
nnoremap <leader>gr :Grepper -tool rg<cr>
nnoremap <leader>*  :Grepper -tool rg -cword -noprompt<cr>
let g:grepper = {}
let g:grepper.tools = ['git', 'rg', 'grep']
command! Todo Grepper -noprompt -tool git -query -E '(TODO|FIXME|XXX):'

" -- YouCompleteMe --------------------------------------------------------
let g:ycm_extra_conf_globlist = ['~/*']
let g:ycm_filetype_specific_completion_to_disable = {
      \ 'gitcommit': 1,
      \ 'text': 1
      \}

" http://stackoverflow.com/questions/14896327/ultisnips-and-youcompleteme
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

let g:ycm_filetype_specific_completion_to_disable = {
      \ 'taskpaper': 1,
      \ 'text': 1
      \}

" -- Fugitive -------------------------------------------------------------
" Include (mailmap'ed) author and a date indication in the fugitive Glog quickfix entries
let g:fugitive_summary_format = '%aN %ai %s'

" -- ALE ------------------------------------------------------------------
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_linters = {
\ 'javascript': ['eslint'],
\ 'typescriptreact': ['eslint','tsserver','typecheck','xo'],
\ 'typescript': ['eslint','tsserver','typecheck','xo'],
\  'ruby': ['rubocop', 'reek'],
\  'css': ['stylelint']
\}

let g:ale_fixers = {
\ 'css': ['prettier'],
\ 'scss': ['prettier'],
\ 'javascript': ['prettier'],
\ 'typescriptreact': ['prettier'],
\ 'typescript': ['prettier']
\}

let g:ale_fix_on_save = 1

" -- UltiSnips ------------------------------------------------------------
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsUsePythonVersion=3
let g:UltiSnipsExpandTrigger = "<Tab>"
let g:UltiSnipsJumpForwardTrigger = "<Tab>"
let g:UltiSnipsJumpBackwardTrigger = "<S-Tab>"
let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips"

" -- Other Plugins ------------------------------------------------------

let g:indentconsistencycop_CheckOnLoad = 0
let g:indentconsistencycop_AutoRunCmd = 'IndentRangeConsistencyCop'

nmap <silent> <leader>D <Plug>DashSearch

let g:rustfmt_autosave = 1

let tern_map_prefix=";"
let g:tern_map_keys=1
let g:tern_show_loc_after_rename=0

let g:dbs = {
\ 'dev': 'postgresql://reco:recopwd@localhost:5432/postgres',
\ }
" -------------------------------------------------------------------------
" MoveFiles, see http://stackoverflow.com/questions/10884520/move-file-within-vim
function! MoveFile(newspec)
     let old = expand('%')
     " could be improved:
     if (old == a:newspec)
         return 0
     endif
     exe 'sav' fnameescape(a:newspec)
     call delete(old)
     " TODO: Delete old buffer
endfunction

command! -nargs=1 -complete=file -bar MoveFile call MoveFile('<args>')
" -------------------------------------------------------------------------


if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8                     " better default than latin1
  setglobal fileencoding=utf-8           " change default file encoding when writing new files
endif
set encoding=utf-8                     " better default than latin1
set fileencoding=utf-8                     " better default than latin1
setglobal fileencoding=utf-8           " change default file encoding when writing new files

" Helpful to get rid of the space when typing
" dabbreviations:
func! Eatchar(pat)
  let c = nr2char(getchar(0))
  return (c =~ a:pat) ? '' : c
endfunc

" Remove trailing spaces
" http://vim.wikia.com/wiki/Remove_unwanted_spaces
autocmd BufWritePre javascript,c,cpp,java,html,ruby,text,taskpaper,slim,css,scss :%s/\s\+$//e

autocmd BufEnter commit.msg setlocal tw=72

nmap <Leader>Fi :set foldmethod=indent<CR>
nmap <Leader>Fm :set foldmethod=manual<CR>

" ViM autocommands for binary plist files:
" source ~/.vim/plist.vim
map <Leader>tj :w<Bar>execute 'silent !tmux send-keys -X -t {top-right} cancel; tmux send-keys -t {top-right} C-u yarn\ test\ --coverage\ --collectCoverageFrom\ %:r:r.%:e\ % Enter'<Bar>redraw!<C-M>

" Debug syntax highlighting
" http://vim.wikia.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor
map <F12> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Highlight git conflicts (https://vimways.org/2018/vim-and-git/)
autocmd BufEnter *.ts,*.json,*.js,*.css,*.scss,*.md,*.txt,*.htm,*.rb,*.c,*.cpp,*.cc,*.h match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

autocmd FileType python let b:coc_root_patterns = ['.git', '.env']

function! AltCommand(path, vim_command)
  let l:alternate = system("alt " . a:path)
  if empty(l:alternate)
    echo "No alternate file for " . a:path . " found!"
  else
    exec a:vim_command . " " . l:alternate
  endif
endfunction

noremap <leader>. :w<cr>:call AltCommand(expand('%'), ':e')<cr>
