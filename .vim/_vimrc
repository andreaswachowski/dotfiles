" vi:expandtab ts=2 sw=2
set nocompatible
set modeline
filetype off

let mapleader = ","

if filereadable(expand("$VIMRUNTIME/macros/matchit.vim"))
  source $VIMRUNTIME/macros/matchit.vim
endif

source ~/.vim/bundles.vim
source $HOME/.vim/tabline.vim

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" -- General settings -----------------------------------------------------
set sessionoptions-=curdir
set sessionoptions+=sesdir

" Do not store global options. Otherwise the machine-specific runtimepath
" would also be stored, and Sessions would not be portable across different
" machines.
set sessionoptions-=options

" Don't save empty windows. This will prevent |:mksession| from saving
" |syntastic-error-window| as empty quickfix windows.
set sessionoptions-=blank

let s:host_specific_pre_setup = expand("<sfile>").".host.pre.".hostname()
if findfile(s:host_specific_pre_setup,"<sfile>:%h") != ""
  source `=expand(s:host_specific_pre_setup)`
endif
unlet s:host_specific_pre_setup

if &term =~ "dtterm" || &term =~ "xterm"|| &term =~ "rxvt-unicode"
  if has("terminfo")
    set t_Sf=<Esc>[3%p1%dm
    set t_Sb=<Esc>[4%p1%dm
  else
    set t_Sf=<Esc>[3%dm
    set t_Sb=<Esc>[4%dm
  endif
endif

set tildeop
set nohlsearch
set visualbell
set autoindent
set incsearch
set sidescroll=1
" FIXME:exrc is not necessary if I am in $HOME/.vim
" Then, the whole configuration will be sourced twice.
set exrc " enable reading of local .vimrc and .exrc files
set winminheight=0 " minimize a window to just its status bar
set textwidth=125
set laststatus=2
set diffopt=filler,vertical
set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P

au BufReadPost quickfix  set nowrap

" -- Color Settings -------------------------------------------------------
if &term =~ "dtterm"
  set t_Co=256
elseif &term =~ "xterm-256color"
  set t_Co=256
elseif  &term =~ "rxvt-unicode"
  set t_Co=88
"2010-04-03: The following two lines don't help on Linux - my term is
"xterm, and I have 256 colors there. Will have to adapt this to work on all
"machines; in the meantime just commenting it out.
"elseif &term =~ "xterm"
"  set t_Co=8
endif

set background=dark
let g:gruvbox_contrast_dark="hard"
colorscheme gruvbox

syntax on

" Prevent weird black color shading with gruvbox. Needs to be set after syntax on
" http://stackoverflow.com/questions/4325682/vim-colorschemes-not-changing-background-color?lq=1
hi Normal ctermbg=0
hi nonText ctermbg=NONE

" https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/
if &term =~ "italic"
  hi Comment cterm=italic
end

if has("gui_running")
  set guioptions-=m " remove menu bar
  set guioptions-=T " remove tool bar
endif

source <sfile>.handling_gzip
source <sfile>.tip343_large_files
source <sfile>.tip112_indentation_helper

" -- OS-specific settings -------------------------------------------------
let s:os = "unknown"
if has("mac")
  let s:os="mac"
elseif has("unix")
  let s:os="unix"
elseif has("win32")
  let s:os="win32"
" else nothing specific to be done.
endif
if s:os != "unknown"
  let s:os_specific_setup = expand("<sfile>").".os.".s:os
  if findfile(s:os_specific_setup,"<sfile>:%h") != ""
    source `=expand(s:os_specific_setup)`
  endif
  unlet s:os_specific_setup
endif
unlet s:os

" -- host-specific settings -----------------------------------------------
let s:host_specific_setup = expand("<sfile>").".host.".hostname()
if findfile(s:host_specific_setup,"<sfile>:%h") != ""
  source `=expand(s:host_specific_setup)`
endif
unlet s:host_specific_setup

" Vim Tip 173: Quick movement between split windows
nmap <c-l> <c-w>l
nmap <c-h> <c-w>h
nmap <c-k> <c-w>k
nmap <c-j> <c-w>j

" -- Plugin-specific pre-load settings ------------------------------------
"  (Have to be defined before the plugin is loaded)
"
let g:netrw_alto = 1 " split below the file browser

" In the tskeleton plugin, g:tskelMapGoToNextTag is by default mapped to <c-j>,
" but that would override the setting of Vim Tip 173 above. Since we don't need it,
" just clear it:
let g:tskelMapGoToNextTag = ""

silent let s:agprg = system('which ag')
if s:agprg != ""
  let g:ackprg = 'ag --nogroup --nocolor --column'
  " The silver searcher and a global .agignore file are used to keep ctrl-p fast.
  " See http://earthwithsun.com/questions/649714/can-i-get-the-vim-ctrlp-plugin-to-ignore-a-specific-folder-in-one-project
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
endif

let g:ctrlp_open_new_file = 'h'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|^.git$\|_site' " _site is for Jekyll projects

let g:GetLatestVimScripts_allowautoinstall=1

" For YouCompleteMe
let g:ycm_extra_conf_globlist = ['~/*']

" Include (mailmap'ed) author and a date indication in the fugitive Glog quickfix entries
let g:fugitive_summary_format = '%aN %ai %s'

let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_scss_checkers = ['scss_lint']
let g:syntastic_haml_checkers = ['haml_lint']
let g:syntastic_ruby_checkers = ['rubocop']

" -------------------------------------------------------------------------
" Store temporary files in a central spot to ease
" clean-up after machine crashes
" https://github.com/tpope/vim-obsession/issues/18
let vimtmp = $HOME . '/tmp/vim/' . getpid()
silent! call mkdir(vimtmp, "p", 0700)
let &backupdir=vimtmp
let &directory=vimtmp

" -------------------------------------------------------------------------

if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8                     " better default than latin1
  setglobal fileencoding=utf-8           " change default file encoding when writing new files
endif
set encoding=utf-8                     " better default than latin1
set fileencoding=utf-8                     " better default than latin1
setglobal fileencoding=utf-8           " change default file encoding when writing new files

" Do not (!) load delimitMate for html and xml files.
au FileType html let b:loaded_delimitMate = 1
au FileType xml let b:loaded_delimitMate = 1

" Helpful to get rid of the space when typing
" dabbreviations:
func! Eatchar(pat)
  let c = nr2char(getchar(0))
  return (c =~ a:pat) ? '' : c
endfunc

" For Transcribe!
au BufEnter *.xsc setlocal tw=0

" Remove trailing spaces
" http://vim.wikia.com/wiki/Remove_unwanted_spaces
autocmd BufWritePre * :%s/\s\+$//e

augroup markdown
  au!
  au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" ViM autocommands for binary plist files:
" source ~/.vim/plist.vim
