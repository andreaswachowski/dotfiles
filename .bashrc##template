# From http://superuser.com/questions/183870/difference-between-bashrc-and-bash-profile/183980#183980 :
#
# ~/.bashrc is the place to put stuff that applies only to bash itself,
# such as alias and function definitions, shell options, and prompt settings.
# (You could also put key bindings there, but for bash they normally go into
#  ~/.inputrc.)

# Careful: bashrc might be sourced for non-interactive shells, in
# particular scp, see
# http://lists.gnu.org/archive/html/bug-bash/2012-06/msg00028.html
# scp breaks when it encounters output, so all echos etc. must be
# avoided, and explicitly only happen when in interactive mode
# https://www.reddit.com/r/openSUSE/comments/7u3050/why_does_opensuse_chose_to_source_homebashrc_in/
# https://bugzilla.opensuse.org/show_bug.cgi?id=1078124

[ -z "$PS1" ] && return

alias be="bundle exec"
alias k="kubectl"
alias kx="kubectx"
alias yvim="GIT_DIR=$HOME/.local/share/yadm/repo.git GIT_WORK_TREE=$HOME vim"
alias dc="docker-compose"
alias ag='echo "use rg instead (due to ag not using .ignore when in subdirectories, see issues 1251, 287. Also last release 3 years old.)"'
alias ti="vim ~/Documents/Dropbox/notes/todos/tickler.taskpaper"
command -v nvim >/dev/null && alias vim="nvim"
command -v xdg-open >/dev/null && alias open="xdg-open"

# Prompt initialization
if [ "$(id -u)" -eq 0 ]; then
  PROMPT_CHAR="#"
else
  PROMPT_CHAR="$"
fi

if command -v git >/dev/null 2>&1; then
  function gitprompt {
    BRANCH=$(git branch 2>/dev/null | cut -f2 -d* -s | cut -b 2-)
    if [ "$BRANCH" ]; then
      echo "[$BRANCH]"
    fi
    echo ""
  }
  export PS1='\u@\h:\w$(gitprompt)\n$(date +'%H:%M:%S') $PROMPT_CHAR '
else
  export PS1='\h:\w$(date +'%H:%M:%S') $PROMPT_CHAR '
fi

# Bash functions
if [ -r ~/.bash_functions ]; then
  . ~/.bash_functions
fi
os_specific_file="$HOME/.config/bash/bash_functions.os.$(uname -s)"
if [ -f "$os_specific_file" ]; then
  . $os_specific_file
fi
host_specific_file="$HOME/.config/bash/bash_functions.host.$(uname -s)"
if [ -f "$host_specific_file" ]; then
  . $host_specific_file
fi

# See "I have [bash] history back to ~2003" on https://news.ycombinator.com/item?id=10162189
# (for a different take, see http://mywiki.wooledge.org/BashFAQ/088 )
# According to my initial test, and according to one tweet in the discussion, on OS X, it is necessary
# to create the directory first:
HISTDIR=${HOME}/.history/$(date -u +%Y/%m/)
if [ ! -d "$HISTDIR" ]; then
  mkdir -p "$HISTDIR"
fi
# When testing, remember that the history is only written on session *exit*
# (see http://stackoverflow.com/questions/19454837/bash-histsize-vs-histfilesize )
shopt -s histappend
HISTFILESIZE= # Never truncate the file
# Use ignoreboth instead of ignoredups so that tmux-resurrect history save
# commands will not be saved. See
# https://github.com/tmux-plugins/tmux-resurrect
HISTCONTROL=ignoreboth
HISTIGNORE='ls:bg:fg:history'
HOSTNAME="$(hostname)"
HOSTNAME_SHORT="${HOSTNAME%%.*}"
HISTFILE="${HOME}/.history/$(date -u +%Y/%m/%d.%H.%M.%S)_${HOSTNAME_SHORT}_$$"

# Use trap instead of PROMPT_COMMAND to append each command immediately instead
# of on session exit, minimizing the effect of sudden power losses
# See https://github.com/tmux-plugins/tmux-resurrect/issues/86
# PROMPT_COMMAND="history -a"
trap 'history -a $HISTFILE' DEBUG

OS_SPECIFIC_BASHRC=~/.config/bash/bashrc.os.$(uname -s)
if [ -f "$OS_SPECIFIC_BASHRC" ]; then
  # shellcheck disable=SC1090
  source "$OS_SPECIFIC_BASHRC"
fi

HOST_SPECIFIC_BASHRC=~/.config/bash/bashrc.host.$(uname -n)
if [ -f "$HOST_SPECIFIC_BASHRC" ]; then
  # shellcheck disable=SC1090
  source "$HOST_SPECIFIC_BASHRC"
fi

# shellcheck disable=SC1090
. "$HOME/bin/z.sh"

set -o vi

if [ -f ~/.fzf.bash ]; then
  # shellcheck source=/dev/null
  source ~/.fzf.bash
  # https://mike.place/2017/fzf-fd/
  export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow -E .git'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  # bind -x '"\C-p": vim $(fzf);'

  command -v fd >/dev/null && {
    _fzf_compgen_path() {
      fd --hidden --follow --exclude ".git" . "$1"
    }

    _fzf_compgen_dir() {
      fd --type d --hidden --follow --exclude ".git" . "$1"
    }
  }

  command -v pytest >/dev/null && {
    _fzf_setup_completion path pytest
  }
fi

# yadm encrypt/decrypt will issue a
# "gpg: Inappropriate ioctl for device" error and bail out
# unless GPG_TTY is set. 
# https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
# https://unix.stackexchange.com/questions/257061/gentoo-linux-gpg-encrypts-properly-a-file-passed-through-parameter-but-throws-i/257065#257065
export GPG_TTY=$(tty)

{% if yadm.hostname == "DELT-C02FN533MD6P" %}
export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
{
	export PNPM_HOME="$HOME/Library/pnpm"
	case ":$PATH:" in
		*":$PNPM_HOME:"*) ;;
		*) export PATH="$PNPM_HOME:$PATH" ;;
	esac
}
{% endif %}
# export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
{% if yadm.hostname == "macbook2021" %}
eval "$(rbenv init -)"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
alias arm="env /usr/bin/arch -arm64 /bin/zsh --login"
alias intel="env /usr/bin/arch -x86_64 /bin/zsh --login"
export BASH_SILENCE_DEPRECATION_WARNING=1
{
	export PNPM_HOME="$HOME/Library/pnpm"
	case ":$PATH:" in
		*":$PNPM_HOME:"*) ;;
		*) export PATH="$PNPM_HOME:$PATH" ;;
	esac
}
{% endif %}

{% if yadm.hostname == "anwa-macbook" %}
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/andreas/opt/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/andreas/opt/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/andreas/opt/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/andreas/opt/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
{% endif %}

{% if yadm.hostname == "DELT-C02FN533MD6P" %}
eval "$(rbenv init -)"
command -v rbenv >/dev/null && {
  # Required by rbenv-default-gems,
  # see https://github.com/rbenv/rbenv-default-gems/issues/1
  export RBENV_ROOT=$HOME/.rbenv
}
command -v rspec >/dev/null && {
  _fzf_complete_rspec() {
    _fzf_complete -- "$@" < <(fd _spec.rb spec)
  }

  complete -F _fzf_complete_rspec -o default -o bashdefault rspec
  complete -F _fzf_complete_rspec -o default -o bashdefault be rspec
  complete -F _fzf_complete_rspec -o default -o bashdefault bundle exec rspec
}

# by default, ulimit -n is only 256. With that low setting, largeish vim
# sessions will fail in git-conflict.nvim with
#
# Error detected while processing VimEnter Autocommands for "*":
# Error executing lua callback: Vim:E903: Process failed to start: too many open files: "/usr/local/bin/git"
# stack traceback:
#
#  [C]: in function 'jobstart'
#  ...e/nvim/lazy/git-conflict.nvim/lua/git-conflict/utils.lua:25: in function 'job'
#  ...l/share/nvim/lazy/git-conflict.nvim/lua/git-conflict.lua:173: in function 'get_git_root'
#  ...l/share/nvim/lazy/git-conflict.nvim/lua/git-conflict.lua:410: in function 'fetch_conflicts'
#  ...l/share/nvim/lazy/git-conflict.nvim/lua/git-conflict.lua:622: in function <...l/share/nvim/lazy/git-conflict.nvim/lua/git-conflict.lua:618>
ulimit -n 2048
{% endif %}
